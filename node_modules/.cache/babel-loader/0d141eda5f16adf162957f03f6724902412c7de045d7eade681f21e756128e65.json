{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Chat-App-React-Coding-Ninjas-Skill-test-main\\\\src\\\\components\\\\NewConversationCard.js\";\n// Importing necessary utility functions and styles\nimport { userImage, getRandomId } from \".\";\nimport \"../styles/ConversationCard.css\";\n\n// ---- Component for Displaying Info for Every Contact when Creating a New Conversation ----\n\n// Functional component representing a card for displaying information about a contact\n// This is used when creating a new conversation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewConversationCard(props) {\n  // Destructuring props to extract necessary data\n  const {\n    currentUser,\n    userData,\n    updateConversation\n  } = props;\n\n  // Checking if the current user is the same as the contact user, and if so, do not render the card\n  if (currentUser === userData.id) {\n    return null;\n  }\n\n  // Handling the click event when a user is selected to start a new conversation\n  function handleOnClick() {\n    // Creating a new conversation object with a random ID, contact ID, and an empty array for messages\n    let newConversation = {\n      conversationId: getRandomId(10, 999),\n      contactId: userData.id,\n      messages: []\n    };\n\n    // Updating the conversation with the new conversation object\n    updateConversation(newConversation);\n  }\n\n  // Render the NewConversationCard component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conv-card-container\",\n    onClick: () => handleOnClick(),\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"profile-pic\",\n      width: \"100px\",\n      height: \"100px\",\n      src: userImage(userData),\n      alt: \"...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conv-info\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: userData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n// Export the NewConversationCard component as the default export\n_c = NewConversationCard;\nexport default NewConversationCard;\nvar _c;\n$RefreshReg$(_c, \"NewConversationCard\");","map":{"version":3,"names":["userImage","getRandomId","jsxDEV","_jsxDEV","NewConversationCard","props","currentUser","userData","updateConversation","id","handleOnClick","newConversation","conversationId","contactId","messages","className","onClick","children","width","height","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/Chat-App-React-Coding-Ninjas-Skill-test-main/src/components/NewConversationCard.js"],"sourcesContent":["// Importing necessary utility functions and styles\nimport { userImage, getRandomId } from \".\";\nimport \"../styles/ConversationCard.css\";\n\n// ---- Component for Displaying Info for Every Contact when Creating a New Conversation ----\n\n// Functional component representing a card for displaying information about a contact\n// This is used when creating a new conversation\nfunction NewConversationCard(props) {\n  // Destructuring props to extract necessary data\n  const { currentUser, userData, updateConversation } = props;\n\n  // Checking if the current user is the same as the contact user, and if so, do not render the card\n  if (currentUser === userData.id) {\n    return null;\n  }\n\n  // Handling the click event when a user is selected to start a new conversation\n  function handleOnClick() {\n    // Creating a new conversation object with a random ID, contact ID, and an empty array for messages\n    let newConversation = {\n      conversationId: getRandomId(10, 999),\n      contactId: userData.id,\n      messages: [],\n    };\n\n    // Updating the conversation with the new conversation object\n    updateConversation(newConversation);\n  }\n\n  // Render the NewConversationCard component\n  return (\n    <div className=\"conv-card-container\" onClick={() => handleOnClick()}>\n      <img\n        className=\"profile-pic\"\n        width=\"100px\"\n        height=\"100px\"\n        src={userImage(userData)}\n        alt=\"...\"\n      />\n      <div className=\"conv-info\">\n        <strong>{userData.name}</strong>\n      </div>\n    </div>\n  );\n}\n\n// Export the NewConversationCard component as the default export\nexport default NewConversationCard;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,WAAW,QAAQ,GAAG;AAC1C,OAAO,gCAAgC;;AAEvC;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAClC;EACA,MAAM;IAAEC,WAAW;IAAEC,QAAQ;IAAEC;EAAmB,CAAC,GAAGH,KAAK;;EAE3D;EACA,IAAIC,WAAW,KAAKC,QAAQ,CAACE,EAAE,EAAE;IAC/B,OAAO,IAAI;EACb;;EAEA;EACA,SAASC,aAAaA,CAAA,EAAG;IACvB;IACA,IAAIC,eAAe,GAAG;MACpBC,cAAc,EAAEX,WAAW,CAAC,EAAE,EAAE,GAAG,CAAC;MACpCY,SAAS,EAAEN,QAAQ,CAACE,EAAE;MACtBK,QAAQ,EAAE;IACZ,CAAC;;IAED;IACAN,kBAAkB,CAACG,eAAe,CAAC;EACrC;;EAEA;EACA,oBACER,OAAA;IAAKY,SAAS,EAAC,qBAAqB;IAACC,OAAO,EAAEA,CAAA,KAAMN,aAAa,CAAC,CAAE;IAAAO,QAAA,gBAClEd,OAAA;MACEY,SAAS,EAAC,aAAa;MACvBG,KAAK,EAAC,OAAO;MACbC,MAAM,EAAC,OAAO;MACdC,GAAG,EAAEpB,SAAS,CAACO,QAAQ,CAAE;MACzBc,GAAG,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACFtB,OAAA;MAAKY,SAAS,EAAC,WAAW;MAAAE,QAAA,eACxBd,OAAA;QAAAc,QAAA,EAASV,QAAQ,CAACmB;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AAAAE,EAAA,GAvCSvB,mBAAmB;AAwC5B,eAAeA,mBAAmB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}